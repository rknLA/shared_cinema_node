body {

  /* Disable Safari scrollbars, because jQuery Mobile annoyingly insists on setting the
     min-height of the page to 320px. It does this (unsuccessfully, in 1.0.1, but successfully
     in 1.1) in order to keep the Mobile Safari location bar from appearing during page
     transitions. But this causes a problem in desktop Safari if the height is <320px.
     If you resize to <320 in a desktop browser, you will see a scrollbar if you don't
     use this style.       
        
     I haven't put this in jquery.mobile.iscrollview.css, because it has to be applied
     to <body>, and so it will affect the entire site/app. It is an appropriate
     setting for any site/app meant to use a page size fixed at the browser window size. 
     If your site/app mixes fixed-height pages with scrolling pages, you will need to
     work out another solution. */
  overflow:hidden;
  
  /* optimizeSpeed is the default. Using optimizeLegibility here will typically DOUBLE
     rendering time! So, think twice about using optimizeLegibility */
  text-rendering: optimizeSpeed;
  
  /* subpixel-antialiased is the default, but you might like to use antialiased for a thinner look
     in Safari. There is no speed penalty for this, nor a speed advantage for "none", which looks
     absolutely terrible... */
  -webkit-font-smoothing: subpixel-antialiased;
  
  /* Shut off long touch on links for info. If this is set to "default", then a long touch
     on a link will display the URL in a popup. This is pretty darn annoying. */  
  -webkit-touch-callout: none;
  
  /* Shut off content selection, because it's really annoying when dragging 
     You might like to do this only for scroller content, though, or enable it for certain
     text you want the user to be able to cut-and-paste */      
  -webkit-user-select: none;   
  -khtml-user-select: none;
  -ms-user-select: none;
  -moz-user-select: none;
  user-select: none;
  }

/* Force list items to be cached on WebKit 
   See: cubiq.org/you-shall-not-flicker 
   
   If this is NOT used, then scrolling long lists might exhibit a "flicker" when scrolling
   toward the bottom of the list, as well as exhibit slow and jerky until the first
   time the user has reached the bottom of the list.
   
   If this IS used, then the browser may be forced to cache the content in advance, resulting
   in smoother scrolling, but with the side-effect of increasing initial rendering time.
   
   This can more than DOUBLE initial rendering time if you are not careful with the selector. The
   recommended CSS at the above link is NOT optimal.
      
   You need to apply this judiciously. For example, if you know your scroller content consists
   of list items, use "li" not "*' to select. * as the right-most component of a select is
   horribly expensive. A small additional performance gain can be made by selecting 
   iscroll-content instead of iscroll-scroller. You might get a 
   glitch on a pull-up if you have one, but it's a small price to pay for doubling speed.
   
   It is important NOT to apply this to .iscroll-scroller itself. This will result in a huge
   performance loss. The second rule below gives performance on iOS devices very close to not 
   using this at all.
   
   I use an @media tag to disable, because it is a safe way of disabling CSS that might contain
   comments. As well, you might like to enable this only for certain devices, which often
   can be detected using media queries.
   
*/

/* This one will always work to eliminate the flicker, regardless of scroller content but 
   is very slow at initial rendering. The scroller may not be initially responsive after 
   a page is first rendered */
@media DISABLED { 
  .iscroll-scroller, 
  .iscroll-scroller * {
    -webkit-transform: translateZ(0);
  }
}

/* So, for the demo, I'm using this one, which doesn't target the scroller itself, and
   targets specific top-level elements inside the scroller. */
@media all { 
  .iscroll-content li  {
    -webkit-transform: translateZ(0);
  }
}

/* The widget adds some styling that needs to be computed at run-time (min-height of scroller
 * content so that pull-up will be hidden, and scroller margin transferred from wrapper padding.)
 * All styles that are added staticly are added through this stylesheet, for maximum flexibility
 *
 * The widget adds these styles to page elements when it is constructed, and removes them when
 * it is destroyed. The styling itself is added by this style sheet. So, any styles added here
 * will be removed when the widget is destroyed. (For example, if you call "destroy" on the widget.)
 */

/* The iscroll-page style is added to the page when the first iscrollview widget is created
 * on the page, and removed when the last iscrollview widget on the page is destroyed.
 */
.iscroll-page {
  /* Add any styles that you want on pages that use iScroll */
}

/* The wrapper is the element that contains the scroller. In the most typical usage, this
 * is .ui-content, but could be any element. */
.iscroll-wrapper {
    min-height:    0;  /* Override any min-height, for example, in case a background image is
                          used on ui-content div used as wrapper. */
    
    /* The wrapper needs to be positioned relative or absolute for proper positioning of the 
       scrollbar with iscroll4 default styling of the scrollbar. Either relative or absolute on the 
       wrapper will cause the absolute positioning  of the scrollbar in iScroll to be relative to 
       the wrapper. */ 
    position: relative;   
  
    /* iScroll examples all show the z-index of the wrapper raised to 1 (default is 0). There may
       be an issue related to touch/click that this solves on specific platforms or depending on 
       the ordering of elements in the HTML source if elements are fixed positioned. 
       This would make sure that the wrapper sees click before underlying content. '
       
       Howver, raising the wrapper Z-index creates a serious problem on page transitions on
       iPhone, so I don't use it here. */ 
                    
}

/* The scroller is the element that contains the elements that are scrolled. The height of this
 * element is typically longer than the wrapper. (It's the stuff that we scroll.) The widget
 * creates this element for you. It wraps all of the children of the wrapper.
 */
.iscroll-scroller {
  /* Add any styles that you want to add to scrollers */
}

/* The "fixed" elements are the elements that are outside of the wrapper. The widget will
 * set headers and footers to this style, as well as any element that has a data-iscroll-fixed
 * attribute. The widget adds-up the height of these elements when it sizes the wrapper.
 */
.iscroll-fixed {
  /* One often sees headers/footers/etc. raised to a z-index of 1000 in iScroll examples. This
     is probably because the scroll bar has been mis-placed, and raising the z-index of the
     header/footer masks the problem. I don't do it here. */
     
  /* Add any styles that you want to add to fixed elements */
}

/* iscroll-content is the content that is scrolled - NOT including any pull-down and pull-up
 * element, and also not including a special placeholder element used when there is a pull-up.
 */
.iscroll-content {
  /* Add any styles that you want to add to iscroll content */
}


/* Note on scrollbar styles: iscroll4 adds inline CSS to the scrollbar when it creates it.
   It sets the z-index to 100 and positions it relative to the wrapper, at the right edge of
   the wrapper. If you want to override this behaviour, set the scrollBarClass option, and then
   style that class as you please */

/* See jquery.mobile.iscroll-pulldown.css for styling of pull-down and pull-up elements */